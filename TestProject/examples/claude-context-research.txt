# Claude Context MCP Server Research Data
# Fetched: 2025-08-22
# Source: GitHub - zilliztech/claude-context and related documentation

## Overview
Claude Context is an MCP plugin that adds semantic code search to Claude Code and other AI coding agents, giving them deep context from your entire codebase.

## Key Features
- Semantic Code Search: Your entire codebase as context for Claude
- Cost Efficiency: ~40% token reduction compared to loading entire directories
- Performance: Uses vector database to only load related code when needed
- Scalable: Integrates with Zilliz Cloud for scalable vector search

## System Requirements
- Node.js version 20.0.0 to < 24.0.0
- OpenAI API key (starts with "sk-")
- Zilliz Cloud vector database API key

## Installation Command
```bash
claude mcp add claude-context \
 -e OPENAI_API_KEY=sk-your-openai-api-key \
 -e MILVUS_TOKEN=your-zilliz-cloud-api-key \
 -- npx @zilliz/claude-context-mcp@latest
```

## Available MCP Tools
1. `index_codebase`: Index entire project for semantic search
2. `search_code`: Perform semantic code search across codebase
3. `clear_index`: Reset/clear the search index
4. `get_indexing_status`: Check progress of indexing operation

## Supported Languages
- TypeScript, JavaScript
- Python, Java
- C++, C#, Go, Rust
- PHP, Ruby, Swift
- Kotlin, Scala
- Markdown

## Configuration Options
- Multiple embedding providers: OpenAI, VoyageAI, Ollama, Gemini
- Customizable file inclusion/exclusion rules
- Hybrid search support (BM25 + dense vector)
- Vector database: Milvus or Zilliz Cloud

## Architecture Components
- @zilliz/claude-context-core: Core indexing engine
- VSCode Extension: Visual Studio Code integration
- @zilliz/claude-context-mcp: MCP server for AI agents

## Integration Benefits
- No multi-round discovery needed
- Brings results directly into Claude's context
- Significant cost and time savings in production
- Better retrieval quality under token constraints
- Works with large codebases (millions of lines)

## Usage Patterns
1. Initial Setup: Get API keys, install MCP server
2. Index Codebase: Run indexing on entire project
3. Semantic Search: Query for relevant code sections
4. Context Integration: Automatically provides context to Claude Code

## Technical Details
- Uses AST-based code splitting with automatic fallback
- Supports LangChain character-based splitter
- Vector database integration for scalable search
- OAuth and API key authentication support